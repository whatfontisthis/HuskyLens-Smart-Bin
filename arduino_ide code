#include <SoftwareSerial.h>
#include <HUSKYLENS.h>
#include <Servo.h>

#define servoPin1 5
#define servoPin2 6
//#define servoPin3 7

HUSKYLENS huskylens;
SoftwareSerial HuskySerial(11, 12);
Servo servo1;
Servo servo2;
//Servo servo3;

int openServo = 0;


void setup() {
//  servo1.attach(servoPin1);
//  servo2.attach(servoPin2);
//  servo3.attach(servoPin3);
//  
//  servo1.write(90);
//  servo2.write(90);
//  servo3.write(90);
//  delay(1000);
//  servo1.write(0);
//  servo2.write(0);
//  servo3.write(0);
//  delay(1000);

  servo1.attach(servoPin1);
  servo1.write(0);
  servo2.attach(servoPin2);
  servo2.write(0);
  delay(2000);
  servo1.detach();
  servo2.detach();

  Serial.begin(115200);
  HuskySerial.begin(9600);
  while (!huskylens.begin(HuskySerial)) {
        Serial.println(F("Begin failed!"));
        Serial.println(F("1.Please recheck the \"Protocol Type\" in HUSKYLENS (General Settings>>Protocol Type>>Serial 9600)"));
        Serial.println(F("2.Please recheck the connection."));
        delay(100);
    }
}

void loop() {
  
//  delay(1000);
  openServo = 0;
//  servo1.write(0);
//  servo2.write(0);
//  servo3.write(0);
  if (!huskylens.request()) Serial.println(F("Fail to request data from HUSKYLENS, recheck the connection!"));
  else if(!huskylens.isLearned()) Serial.println(F("Nothing learned, press learn button on HUSKYLENS to learn one!"));
  else if(!huskylens.available()) Serial.println(F("No block or arrow appears on the screen!"));
 
    else
    {
     Serial.println(F("###########"));
     HUSKYLENSResult learnedItem1 = huskylens.getBlockLearned(0);

//        HUSKYLENSResult learnedItem2 = huskylens.getBlockLearned(1);
     HUSKYLENSResult watchItem;

        while (huskylens.available())
        {

          watchItem = huskylens.read();
            openServo = compareItem(learnedItem1, watchItem);

        }

  delay(1000);
//      Serial.print("learn1 : ");
//      Serial.println(learnedItem1.ID);
//      Serial.print("learn2 : ");
//      Serial.println(learnedItem2.ID);
//      Serial.print("learn3 : ");
//      Serial.println(huskylens.getBlockLearned(2).ID);
//      delay(300);
    }

//    servo1.attach(servoPin1);
//    servo2.attach(servoPin2);
//    servo3.attach(servoPin3);
    Serial.print("openServo : ");
    Serial.println(openServo);
    ServoControl(openServo);
//    servo1.attach(servoPin1);
//    servo2.attach(servoPin2);
//    servo3.attach(servoPin3);

}


int compareItem(HUSKYLENSResult learnedItem, HUSKYLENSResult watchItem) {
  if(learnedItem.ID == 1){
    Serial.println(String() +F("Recognized ID is : ")+learnedItem.ID);
    return 5;
  } else if (learnedItem.ID == 2){
    Serial.println(String() +F("Recognized ID is : ")+learnedItem.ID);
    return 6;
  }
//  else if (learnedItem.ID == 3){
//    Serial.println(String() +F("Recognized ID is : ")+learnedItem.ID);
//    return 7;
//  }
  else {
    Serial.println(String() +F("Nothing recognized."));
    return 0;
  }
}

void ServoControl(int servoPin) {
  if(servoPin == servoPin1) {
    servo1.attach(servoPin1);
    servo1.write(130);
    delay(5000);
    servo1.write(0);
    delay(1500);
    servo1.detach();
  }
  else if (servoPin == servoPin2) {
    servo2.attach(servoPin2);
    servo2.write(90);
    delay(5000);
    servo2.write(0);
    delay(1500);
    servo2.detach();
  }
  else
    openServo = 0;
//  else if (servoPin == servoPin3) {
//    servo3.attach(servoPin3);
//    servo3.write(90);
//    delay(1500);
//    servo3.write(0);
//    delay(1500);
//    servo3.detach();
//  }
//  else
//    delay(1500); 
}
